[{"path":[]},{"path":"https://wjschne.github.io/simstandard/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"https://wjschne.github.io/simstandard/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"https://wjschne.github.io/simstandard/articles/simstandard_tutorial.html","id":"purpose-of-simstandard","dir":"Articles","previous_headings":"","what":"Purpose of simstandard","title":"Using the simstandard package","text":"figure , can see hypothetical structural model standardized loadings path coefficients.  Suppose need simulate multivariate normal data based model, know error variances latent disturbance variances needed make model produce standardized data. often difficult find values algebraically, instead must found iteratively. simstandard package finds standardized variances creates standardized multivariate normal data using lavaan syntax. can also create latent variable scores, error terms, disturbance terms, estimated factor scores, equally weighted composite scores latent variable.","code":""},{"path":"https://wjschne.github.io/simstandard/articles/simstandard_tutorial.html","id":"generate-model-based-multivariate-data","dir":"Articles","previous_headings":"","what":"Generate Model-Based Multivariate Data","title":"Using the simstandard package","text":"Let’s make function display correlations covariance matrices: data standardized, covariance matrix observed latent variables nearly identical correlation matrix. error disturbance terms standardized.  return observed variables","code":"library(simstandard) library(lavaan) library(knitr) library(dplyr) library(ggplot2) library(tibble) library(tidyr)  # lavaan syntax for model m <- \" A =~ 0.7 * A1 + 0.8 * A2 + 0.9 * A3 + 0.3 * B1 B =~ 0.7 * B1 + 0.8 * B2 + 0.9 * B3 B ~ 0.6 * A \"  # Simulate data d <- sim_standardized(m, n = 100000)  # Display First 6 rows head(d) #> # A tibble: 6 × 15 #>        A1     A2     A3     B1     B2     B3       A      B   e_A1   e_A2 #>     <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>   <dbl>  <dbl>  <dbl>  <dbl> #> 1  1.51    0.884  1.03   2.38   3.58   2.87   1.31    2.79   0.595 -0.166 #> 2  1.57    0.587  0.514  0.334  0.509  1.12   1.05    0.678  0.834 -0.256 #> 3 -0.498   0.589  0.762  0.363 -0.313  0.705  0.0385  0.175 -0.525  0.558 #> 4 -0.269  -0.941 -0.763 -0.288  0.217 -0.683 -0.856  -0.458  0.330 -0.256 #> 5 -0.0163 -0.814  0.447 -0.226  0.723  0.203  1.04   -0.266 -0.747 -1.65  #> 6 -1.44   -0.192 -0.795 -1.13  -0.441 -0.822 -0.966  -0.671 -0.765  0.581 #> # ℹ 5 more variables: e_A3 <dbl>, e_B1 <dbl>, e_B2 <dbl>, e_B3 <dbl>, d_B <dbl> ggcor <- function(d) {   as.data.frame(d) %>%     tibble::rownames_to_column(\"rowname\") %>%     tidyr::pivot_longer(-rowname, names_to = \"colname\", values_to = \"r\") %>%     dplyr::mutate(rowname = forcats::fct_inorder(rowname) %>%                     forcats::fct_rev()) %>%     dplyr::mutate(colname = factor(colname,                                    levels = rev(levels(rowname)))) %>%     ggplot(aes(colname, rowname, fill = r)) +     geom_tile(color = \"gray90\") +     geom_text(       aes(         label = formatC(r, digits = 2, format = \"f\") %>%           stringr::str_replace_all(\"0\\\\.\", \".\") %>%           stringr::str_replace_all(\"1.00\", \"1\")       ),       color = \"white\",       fontface = \"bold\",       family = \"serif\"     ) +     scale_fill_gradient2(       NULL,       na.value = \"gray20\",       limits = c(-1.01, 1.01),       high = \"#924552\",       low = \"#293999\"     ) +     coord_equal() +     scale_x_discrete(NULL, position = \"top\") +     scale_y_discrete(NULL) +     theme_light(base_family = \"serif\", base_size = 14) } cov(d) %>%   ggcor() d <- sim_standardized(m,                       n = 100000,                       latent = FALSE,                       errors = FALSE) # Display First 6 rows head(d) #> # A tibble: 6 × 6 #>       A1     A2      A3     B1      B2      B3 #>    <dbl>  <dbl>   <dbl>  <dbl>   <dbl>   <dbl> #> 1  1.61   1.15   2.06    0.903 -0.0472 -0.0756 #> 2  1.46   1.50   0.684   0.125 -0.483   0.339  #> 3 -0.891 -1.19  -1.22   -0.517  0.396  -0.725  #> 4  0.133 -1.55  -0.787  -1.00  -0.171  -1.18   #> 5 -0.929 -1.64  -0.964  -1.23  -1.51   -1.01   #> 6 -0.434 -0.242 -0.0973 -0.869 -0.781  -1.21"},{"path":"https://wjschne.github.io/simstandard/articles/simstandard_tutorial.html","id":"comparison-with-lavaansimulatedata","dir":"Articles","previous_headings":"","what":"Comparison with lavaan::simulateData","title":"Using the simstandard package","text":"love lavaan package. However, one aspect one function lavaan quite right yet. lavaan’s simulateData function known generate non-standardized data, even standardized parameter set TRUE. See creates variable Y variance higher 1.  test model, simstandard calculate variables variances 1.","code":"test_model <- \" Y ~ -.75 * X_1 + .25 * X_2 X =~ .75 * X_1 + .75 * X_2 \"  library(lavaan) d_lavaan <- simulateData(model = test_model,                          sample.nobs = 100000,                          standardized = TRUE) cov(d_lavaan) %>%   ggcor() sim_standardized(test_model,                  n = 100000,                  errors = FALSE) %>%   cov %>%   ggcor()"},{"path":"https://wjschne.github.io/simstandard/articles/simstandard_tutorial.html","id":"inspecting-model-matrices","dir":"Articles","previous_headings":"","what":"Inspecting model matrices","title":"Using the simstandard package","text":"can inspect matrices simstandard uses create data calling simstandardized_matrices. matrix contains asymmetric path coefficients (.e., loadings structural coefficients). coefficients specified lavaan model syntax.  S matrix contains symmetric path coefficients (.e., variances correlations observed latent variables). endogenous variables, variances correlations refer variance correlations variable’s associated error disturbance term. case, endogenous variable, thus variance diagonal S matrix 1.  Thus, can use results insert missing values path diagram beginning tutorial","code":"matrices <- sim_standardized_matrices(m) matrices$RAM_matrices$A %>%   ggcor() matrices$RAM_matrices$S %>%   ggcor()"},{"path":"https://wjschne.github.io/simstandard/articles/simstandard_tutorial.html","id":"estimated-factor-scores","dir":"Articles","previous_headings":"","what":"Estimated Factor Scores","title":"Using the simstandard package","text":"want estimate factor scores using regression method (.e., Thurstone’s method), set factor_scores TRUE. scores ending FS factor score estimates.","code":"m <- \" A =~ 0.9 * A1 + 0.8 * A2 + 0.7 * A3 \" sim_standardized(m,                  n = 100000,                  factor_scores = TRUE) %>%   head() #> # A tibble: 6 × 8 #>       A1     A2     A3       A    e_A1    e_A2   e_A3   A_FS #>    <dbl>  <dbl>  <dbl>   <dbl>   <dbl>   <dbl>  <dbl>  <dbl> #> 1 -0.186 -0.189 -0.291  0.0356 -0.218  -0.218  -0.316 -0.212 #> 2 -1.75  -0.500 -0.411 -1.50   -0.398   0.701   0.639 -1.24  #> 3 -0.957 -0.851 -2.47  -1.10    0.0331  0.0293 -1.70  -1.23  #> 4  0.836  1.37  -0.980  1.30   -0.337   0.322  -1.89   0.706 #> 5 -0.780 -0.411 -1.96  -1.31    0.397   0.634  -1.05  -0.912 #> 6  1.03  -0.243  0.505  0.465   0.613  -0.615   0.179  0.630"},{"path":"https://wjschne.github.io/simstandard/articles/simstandard_tutorial.html","id":"adding-factor-scores-to-new-data","dir":"Articles","previous_headings":"Estimated Factor Scores","what":"Adding factor scores to new data","title":"Using the simstandard package","text":"Suppose new data wish add estimated factor scores . add_factor_scores function take data return data estimated factors added .","code":"d <- tibble::tribble(   ~A1,  ~A2,  ~A3,    2L,  2.5,  1.3,   -1L, -1.5, -2.1   )  add_factor_scores(d, m) #>   A1   A2   A3      A_FS #> 1  2  2.5  1.3  2.101242 #> 2 -1 -1.5 -2.1 -1.368772"},{"path":"https://wjschne.github.io/simstandard/articles/simstandard_tutorial.html","id":"composite-scores","dir":"Articles","previous_headings":"","what":"Composite Scores","title":"Using the simstandard package","text":"want calculate equally-weighted composite scores based indicators latent variable, set `composites = TRUE’. Composite scores equal weights can also added new data:","code":"m <- \" A =~ 0.9 * A1 + 0.8 * A2 + 0.7 * A3 \" sim_standardized(   m,   n = 100000,   composites = TRUE   ) %>%   head() #> # A tibble: 6 × 8 #>       A1     A2     A3      A   e_A1   e_A2   e_A3 A_Composite #>    <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>       <dbl> #> 1  0.138 -0.699 -0.234 -0.446  0.539 -0.342 0.0781      -0.304 #> 2 -0.600 -0.794  0.121 -0.472 -0.176 -0.416 0.452       -0.487 #> 3 -0.339  0.611  0.240  0.150 -0.474  0.491 0.135        0.196 #> 4  1.56   1.38   1.39   1.27   0.417  0.367 0.502        1.66  #> 5 -1.51  -0.985  0.420 -1.46  -0.199  0.182 1.44        -0.795 #> 6  0.527  1.07   2.20   0.416  0.152  0.736 1.91         1.45 add_composite_scores(d, m) #>   A1   A2   A3 A_Composite #> 1  2  2.5  1.3    2.220935 #> 2 -1 -1.5 -2.1   -1.761431"},{"path":"https://wjschne.github.io/simstandard/articles/simstandard_tutorial.html","id":"return-lavaan-syntax-with-all-parameters-set-free","dir":"Articles","previous_headings":"","what":"Return lavaan syntax with all parameters set free","title":"Using the simstandard package","text":"Suppose want verify data generated sim_standardized function correct. need analogous model, fixed parameters set free. manually remove fixed parameter values, large models process tedious introduces risk error. fixed2free function painlessly removes fixed parameters values model. Now let’s use lavaan see observed data d conform model m_free.   can seen, fit measures indicate near-perfect fit, parameter estimates within rounding error fixed parameters model m.","code":"# lavaan syntax for model m <- \" A =~ 0.7 * A1 + 0.8 * A2 + 0.9 * A3 + 0.3 * B1 B =~ 0.7 * B1 + 0.8 * B2 + 0.9 * B3 B ~ 0.6 * A \" # Make model m free m_free <- fixed2free(m) # Display model m_free cat(m_free) #> B ~ A #> A =~ A1 + A2 + A3 + B1 #> B =~ B1 + B2 + B3 # Set the random number generator for reproducible results set.seed(12) # Generate data based on model m d <- sim_standardized(   m,   n = 100000,   latent = FALSE,   errors = FALSE)  # Evaluate the fit of model m_free on data d library(lavaan) lav_results <- sem(   model = m_free,   data = d)  # Display summary of model summary(   lav_results,   standardized = TRUE,   fit.measures = TRUE) #> lavaan 0.6.17 ended normally after 27 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        14 #>  #>   Number of observations                        100000 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 7.493 #>   Degrees of freedom                                 7 #>   P-value (Chi-square)                           0.379 #>  #> Model Test Baseline Model: #>  #>   Test statistic                            371352.125 #>   Degrees of freedom                                15 #>   P-value                                        0.000 #>  #> User Model versus Baseline Model: #>  #>   Comparative Fit Index (CFI)                    1.000 #>   Tucker-Lewis Index (TLI)                       1.000 #>  #> Loglikelihood and Information Criteria: #>  #>   Loglikelihood user model (H0)            -666610.982 #>   Loglikelihood unrestricted model (H1)    -666607.236 #>                                                        #>   Akaike (AIC)                             1333249.965 #>   Bayesian (BIC)                           1333383.146 #>   Sample-size adjusted Bayesian (SABIC)    1333338.653 #>  #> Root Mean Square Error of Approximation: #>  #>   RMSEA                                          0.001 #>   90 Percent confidence interval - lower         0.000 #>   90 Percent confidence interval - upper         0.004 #>   P-value H_0: RMSEA <= 0.050                    1.000 #>   P-value H_0: RMSEA >= 0.080                    0.000 #>  #> Standardized Root Mean Square Residual: #>  #>   SRMR                                           0.001 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>   A =~                                                                   #>     A1                1.000                               0.703    0.703 #>     A2                1.142    0.005  231.116    0.000    0.803    0.800 #>     A3                1.284    0.005  247.676    0.000    0.903    0.901 #>     B1                0.427    0.004  114.547    0.000    0.300    0.300 #>   B =~                                                                   #>     B1                1.000                               0.701    0.700 #>     B2                1.139    0.005  238.139    0.000    0.798    0.798 #>     B3                1.288    0.005  247.366    0.000    0.902    0.901 #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>   B ~                                                                    #>     A                 0.597    0.004  141.196    0.000    0.599    0.599 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>    .A1                0.507    0.003  194.579    0.000    0.507    0.506 #>    .A2                0.362    0.002  165.904    0.000    0.362    0.359 #>    .A3                0.188    0.002   97.276    0.000    0.188    0.188 #>    .B1                0.170    0.001  130.982    0.000    0.170    0.169 #>    .B2                0.362    0.002  178.775    0.000    0.362    0.362 #>    .B3                0.189    0.002  106.863    0.000    0.189    0.189 #>     A                 0.495    0.004  121.519    0.000    1.000    1.000 #>    .B                 0.315    0.003  124.248    0.000    0.641    0.641  # Extract RAM paths ram <- lav2ram(lav_results)  # Display asymmetric paths (i.e., single-headed arrows for # loadings and structure coefficients) ram$A %>% ggcor() # Display symmetric paths (i.e., curved double-headed arrows # exogenous variances, error variances, disturbance variances, # and any covariances among these) ram$S %>% ggcor()"},{"path":"https://wjschne.github.io/simstandard/articles/simstandard_tutorial.html","id":"return-lavaan-syntax-for-a-model-with-standardized-variances-specified","dir":"Articles","previous_headings":"","what":"Return lavaan syntax for a model with standardized variances specified","title":"Using the simstandard package","text":"Although simstandardized function generate data , might want use function different package instead, lavaan::simulateData simsem::sim. case, can use model_complete function output lavaan syntax standardized model standardized variances specified.","code":"# Specify model m <- \" A =~ 0.7 * A1 + 0.8 * A2 + 0.9 * A3 + 0.3 * B1 B =~ 0.7 * B1 + 0.8 * B2 + 0.9 * B3 B ~ 0.6 * A \" m_complete <- model_complete(m) # Display complete model cat(m_complete) #>  #> A =~ 0.7 * A1 + 0.8 * A2 + 0.9 * A3 + 0.3 * B1 #> B =~ 0.7 * B1 + 0.8 * B2 + 0.9 * B3 #> B ~ 0.6 * A #>  #> # Variances #> A1 ~~ 0.51 * A1 #> A2 ~~ 0.36 * A2 #> A3 ~~ 0.19 * A3 #> B1 ~~ 0.168 * B1 #> B2 ~~ 0.36 * B2 #> B3 ~~ 0.19 * B3 #> A ~~ 1 * A #> B ~~ 0.64 * B"},{"path":"https://wjschne.github.io/simstandard/articles/simstandard_tutorial.html","id":"return-lavaan-syntax-from-matrices","dir":"Articles","previous_headings":"","what":"Return lavaan syntax from matrices","title":"Using the simstandard package","text":"Suppose research article provides model coefficients table. spend time creating lavaan syntax hand, work can tedious. matrix2lavaan function can help save time models already specified matrix form.","code":""},{"path":"https://wjschne.github.io/simstandard/articles/simstandard_tutorial.html","id":"the-measurement-model","dir":"Articles","previous_headings":"Return lavaan syntax from matrices","what":"The measurement model","title":"Using the simstandard package","text":"measurement model can specified matrix column names latent variables row names indicator variables. three latent variables, Vocabulary, Working Memory Capacity, Reading, defined three indicator variables.","code":"m_meas <- matrix(c(   .8, 0, 0,  # VC1   .9, 0, 0,  # VC2   .7, 0, 0,  # VC3   0, .6, 0,  # WM1   0, .7, 0,  # WM2   0, .8, 0,  # WM3   0, 0, .9,  # RD1   0, 0, .7,  # RD2   0, 0, .8), # RD3   nrow = 9,   byrow = TRUE,   dimnames = list(     c(\"VC1\", \"VC2\", \"VC3\",       \"WM1\", \"WM2\", \"WM3\",       \"RD1\", \"RD2\", \"RD3\"),     c(\"Vocabulary\", \"WorkingMemory\", \"Reading\")   ))"},{"path":"https://wjschne.github.io/simstandard/articles/simstandard_tutorial.html","id":"the-structural-model","dir":"Articles","previous_headings":"Return lavaan syntax from matrices","what":"The structural model","title":"Using the simstandard package","text":"structural model can specified matrix predictors column names criterion variables row names. Vocabulary Working Memory Capacity predicting Reading Scores. 3 3 matrix zeroes (ignored).","code":"m_struct <- matrix(c(0.4, 0.3),                    ncol = 2,                    dimnames = list(\"Reading\",                                    c(\"Vocabulary\", \"WorkingMemory\"))) m_struct <- matrix(c(0,   0,   0,  # Vocabulary                      0,   0,   0,  # WorkingMemory                      0.4, 0.3, 0), # Reading                    nrow = 3,                    byrow = TRUE) rownames(m_struct) <- c(\"Vocabulary\", \"WorkingMemory\", \"Reading\") colnames(m_struct) <- c(\"Vocabulary\", \"WorkingMemory\", \"Reading\")"},{"path":"https://wjschne.github.io/simstandard/articles/simstandard_tutorial.html","id":"covariances","dir":"Articles","previous_headings":"Return lavaan syntax from matrices","what":"Covariances","title":"Using the simstandard package","text":"variances covariances must specified symmetric matrix, though variables can omitted. specify latent variables Vocabulary Working Memory Capacity correlated.","code":"m_cov <- matrix(c(1,   0.5,                   0.5, 1),                 nrow = 2,                 dimnames = list(                   c(\"Vocabulary\", \"WorkingMemory\"),                   c(\"Vocabulary\", \"WorkingMemory\")                 ))"},{"path":"https://wjschne.github.io/simstandard/articles/simstandard_tutorial.html","id":"using-the-matrix2lavaan-function","dir":"Articles","previous_headings":"Return lavaan syntax from matrices","what":"Using the matrix2lavaan function","title":"Using the simstandard package","text":"matrix2lavaan function takes arguments measurement model, structural model, covariances. three matrices can omitted.","code":"model <- matrix2lavaan(measurement_model = m_meas,                        structural_model = m_struct,                        covariances = m_cov) cat(model) #> Vocabulary =~ 0.8 * VC1 + 0.9 * VC2 + 0.7 * VC3 #> WorkingMemory =~ 0.6 * WM1 + 0.7 * WM2 + 0.8 * WM3 #> Reading =~ 0.9 * RD1 + 0.7 * RD2 + 0.8 * RD3 #> Reading ~ 0.4 * Vocabulary + 0.3 * WorkingMemory #> Vocabulary ~~ 0.5 * WorkingMemory"},{"path":"https://wjschne.github.io/simstandard/articles/simstandard_tutorial.html","id":"specifying-models-with-data-frames-instead-of-matrices","dir":"Articles","previous_headings":"Return lavaan syntax from matrices","what":"Specifying models with data.frames instead of matrices","title":"Using the simstandard package","text":"alternative, matrix2lavaan function can take data.frames (tibbles) either rownames first column character vector.","code":"# A tibble with indicator variables listed in the first column m_meas <- tibble::tribble(      ~Test, ~Vocabulary, ~WorkingMemory, ~Reading,      \"VC1\",         0.8,              0,        0,      \"VC2\",         0.9,              0,        0,      \"VC3\",         0.7,              0,        0,      \"WM1\",           0,            0.6,        0,      \"WM2\",           0,            0.7,        0,      \"WM3\",           0,            0.8,        0,      \"RD1\",           0,              0,      0.9,      \"RD2\",           0,              0,      0.7,      \"RD3\",           0,              0,      0.8)  # A data.frame with criterion variable specified as a row name m_struct <- data.frame(Vocabulary = 0.4,                        WorkingMemory = 0.3,                        row.names = \"Reading\")  # A data.frame with variable names specified as row names m_cov <- data.frame(Vocabulary = c(1, 0.5),                     WorkingMemory = c(0.5, 1)) rownames(m_cov) <- c(\"Vocabulary\", \"WorkingMemory\")   model <- matrix2lavaan(measurement_model = m_meas,                        structural_model = m_struct,                        covariances = m_cov)"},{"path":"https://wjschne.github.io/simstandard/articles/simstandard_tutorial.html","id":"return-model-implied-correlation-matrices","dir":"Articles","previous_headings":"","what":"Return model-implied correlation matrices","title":"Using the simstandard package","text":"specifying standardized model lavaan syntax, can extract model-implied correlation matrix. default, extract just correlations among observed variables.  possible extract model-implied correlations among observed variables, latent variables, error terms, factor scores, composite variables. example, extract correlations among observed latent variables:","code":"get_model_implied_correlations(m) %>%   ggcor() get_model_implied_correlations(   m,   latent = TRUE) %>%   ggcor() # lavaan syntax for model m <- \" A =~ 0.7 * A1 + 0.8 * A2 + 0.9 * A3 + 0.3 * B1 B =~ 0.7 * B1 + 0.8 * B2 + 0.9 * B3 B ~ 0.6 * A  # Variances A1 ~~ 0.51 * A1 A2 ~~ 0.36 * A2 A3 ~~ 0.19 * A3 B1 ~~ 0.168 * B1 B2 ~~ 0.36 * B2 B3 ~~ 0.19 * B3 A ~~ 1 * A B ~~ 0.64 * B \"  m_fit <- lavaanify(m)      # mRAM <- lavMatrixRepresentation(m_fit,                                  # representation = \"RAM\")  v <- list(     v_latent_exogenous = lavNames(m_fit, \"lv.x\"),     v_latent_endogenous = lavNames(m_fit, \"lv.nox\"),     v_observed_exogenous = lavNames(m_fit, \"ov.x\"),     v_observed_endogenous = lavNames(m_fit, \"ov.nox\"),     v_observed_indicator = lavNames(m_fit, \"ov.ind\"),     v_disturbance = paste0(\"d_\", lavNames(m_fit, \"lv.nox\")),     v_error = paste0(\"e_\", lavNames(m_fit, \"ov.nox\"))   )  v$v_residual <- c(v$v_error,                         v$v_disturbance) v$v_exogenous <- c(v$v_residual,                          v$v_observed_exogenous,                          v$v_latent_exogenous) v$v_endogenous <- c(v$v_observed_endogenous,                           v$v_latent_endogenous) v$v_modeled <- c(v$v_endogenous,                        v$v_latent_exogenous,                        v$v_observed_exogenous) v$v_observed <- c(v$v_observed_exogenous,                          v$v_observed_endogenous) v$v_latent <- c(v$v_latent_exogenous,                        v$v_latent_endogenous)  # Reduced ram rram <- list() rram$A <- matrix(0,                   nrow = length(v$v_modeled),                   ncol = length(v$v_modeled),                   dimnames = list(v$v_modeled, v$v_modeled)) rram$S <- rram$A  rram$F <- matrix(   0,   nrow = length(v$v_observed),   ncol = length(v$v_modeled),   dimnames = list(v$v_observed, v$v_modeled) )    m_fit |>    filter(op == \"=~\") |>       select(rhs, lhs, ustart) #>   rhs lhs ustart #> 1  A1   A    0.7 #> 2  A2   A    0.8 #> 3  A3   A    0.9 #> 4  B1   A    0.3 #> 5  B1   B    0.7 #> 6  B2   B    0.8 #> 7  B3   B    0.9  m_fit |>    filter(op == \"~\") |>    select(lhs, rhs, ustart) #>   lhs rhs ustart #> 1   B   A    0.6  d_A <- m_fit |>    filter(op %in% c(\"=~\", \"~\")) |>    mutate(cause = if_else(op == \"~\", rhs, lhs),          effect = if_else(op == \"~\", lhs, rhs))  d_S <- m_fit |>    filter(op %in% c(\"~~\"))   rram$A[cbind(d_A$effect, d_A$cause)] <- d_A$ustart rram$S[cbind(d_S$lhs, d_S$rhs)] <- d_S$ustart rram$S[cbind(d_S$rhs, d_S$lhs)] <- d_S$ustart rram$F[cbind(v$v_observed, v$v_observed)] <- 1  dimnames(rram$S) <- list(v$v_exogenous, v$v_exogenous)       extended_diag <- matrix(0, nrow = nrow(rram$A), ncol = length(v$v_residual)) |>    `dimnames<-`(list(rownames(rram$A), v$v_residual)) |>    `diag<-`(sqrt(diag(rram$S[v$v_residual, v$v_residual]))) extended_A <- cbind(rram$A, extended_diag) |>    rbind(matrix(0, nrow = length(v$v_residual),                ncol = length(v$v_residual) + nrow(rram$A))) %>%   `rownames<-`(colnames(.))  # Identity matrix the same size as A and S I <- diag(nrow(extended_A))   # Inverted I - A for total effects (direct + indirect) iA <- solve(I - extended_A)   # Exogenous covariance matrix extended_S <- matrix(0,                       nrow = nrow(extended_A),                       ncol = ncol(extended_A)) |>    `dimnames<-`(dimnames(extended_A)) # diag(extended_S) <- 1 extended_S[cbind(rownames(rram$S), colnames(rram$S))] <- 1  extended_cov <- iA %*% extended_S %*% t(iA)  extended_mu <- rep(0, nrow(extended_A)) |> `names<-`(rownames(extended_A)) extended_mu[v$v_residual] <- 0  eigen(rram$S, symmetric = T) #> eigen() decomposition #> $values #> [1] 1.000 0.640 0.510 0.360 0.360 0.190 0.190 0.168 #>  #> $vectors #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    0    0    1    0    0    0    0    0 #> [2,]    0    0    0    1    0    0    0    0 #> [3,]    0    0    0    0    0    0    1    0 #> [4,]    0    0    0    0    0    0    0    1 #> [5,]    0    0    0    0    1    0    0    0 #> [6,]    0    0    0    0    0    1    0    0 #> [7,]    0    1    0    0    0    0    0    0 #> [8,]    1    0    0    0    0    0    0    0   ((iA %*% extended_S %*% t(iA))[,v$v_exogenous] ^ 2) |>    as.data.frame() |>    rownames_to_column(\"variable\") |>    pivot_longer(-variable, names_to = \"exogenous\") |>    filter(value != 0) |>    arrange(exogenous) |>    ggplot(aes(variable, value)) +    geom_col(aes(fill = exogenous)) (iA %*% extended_S %*% t(iA))[v$v_endogenous,v$v_exogenous] #>         e_A1 e_A2      e_A3     e_B1 e_B2      e_B3  d_B    A #> A1 0.7141428  0.0 0.0000000 0.000000  0.0 0.0000000 0.00 0.70 #> A2 0.0000000  0.6 0.0000000 0.000000  0.0 0.0000000 0.00 0.80 #> A3 0.0000000  0.0 0.4358899 0.000000  0.0 0.0000000 0.00 0.90 #> B1 0.0000000  0.0 0.0000000 0.409878  0.0 0.0000000 0.56 0.72 #> B2 0.0000000  0.0 0.0000000 0.000000  0.6 0.0000000 0.64 0.48 #> B3 0.0000000  0.0 0.0000000 0.000000  0.0 0.4358899 0.72 0.54 #> B  0.0000000  0.0 0.0000000 0.000000  0.0 0.0000000 0.80 0.60"},{"path":"https://wjschne.github.io/simstandard/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"W. Joel Schneider. Author, maintainer.","code":""},{"path":"https://wjschne.github.io/simstandard/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schneider W (2024). simstandard: Generate Standardized Data. R package version 0.7.0, https://wjschne.github.io/simstandard/, https://github.com/wjschne/simstandard.","code":"@Manual{,   title = {simstandard: Generate Standardized Data},   author = {W. Joel Schneider},   year = {2024},   note = {R package version 0.7.0, https://wjschne.github.io/simstandard/},   url = {https://github.com/wjschne/simstandard}, }"},{"path":"https://wjschne.github.io/simstandard/index.html","id":"simstandard-","dir":"","previous_headings":"","what":"Generate Standardized Data","title":"Generate Standardized Data","text":"Sometimes structural model standardized path coefficients, structural coefficients, correlations, know error disturbance variances. purpose simstandard calculate variances simulate multivariate normal data based model.","code":""},{"path":"https://wjschne.github.io/simstandard/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Standardized Data","text":"can either install simstandard CRAN install development version simstandard github.","code":""},{"path":"https://wjschne.github.io/simstandard/index.html","id":"option-1-install-the-most-recent-stable-release-from-cran","dir":"","previous_headings":"Installation","what":"Option 1: Install the most recent stable release from CRAN","title":"Generate Standardized Data","text":"can install simstandard CRAN running code:","code":"install.packages(\"simstandard\")"},{"path":"https://wjschne.github.io/simstandard/index.html","id":"option-2-install-the-development-version-from-github","dir":"","previous_headings":"Installation","what":"Option 2: Install the development version from GitHub","title":"Generate Standardized Data","text":"install development version simstandard, need check remotes packages installed. , run : sure remotes package installed, can install development version simstandard GitHub running code:","code":"install.packages(\"remotes\") remotes::install_github(\"wjschne/simstandard\")"},{"path":"https://wjschne.github.io/simstandard/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generate Standardized Data","text":"simstandard package uses lavaan syntax specify models. See tutorial package.","code":"library(simstandard) model <- \" A =~ 0.5 * A1 + 0.8 * A2 B =~ 0.6 * B1 + 0.7 * B2 B ~ 0.8 * A C ~~ 0.5 * A \" data <- sim_standardized(m = model, n = 500)  knitr::kable(head(data), digits = 2)"},{"path":"https://wjschne.github.io/simstandard/reference/add_composite_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"For each latent variable in a structural model, add a composite score to observed data. — add_composite_scores","title":"For each latent variable in a structural model, add a composite score to observed data. — add_composite_scores","text":"latent variable structural model, add composite score observed data.","code":""},{"path":"https://wjschne.github.io/simstandard/reference/add_composite_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For each latent variable in a structural model, add a composite score to observed data. — add_composite_scores","text":"","code":"add_composite_scores(   d,   m,   mu = 0,   sigma = 1,   names_suffix = \"_Composite\",   keep_observed_scores = TRUE,   ... )"},{"path":"https://wjschne.github.io/simstandard/reference/add_composite_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For each latent variable in a structural model, add a composite score to observed data. — add_composite_scores","text":"d data.frame observed data standardized form (.e, z-scores) m character string lavaan model mu Score means. Composite scores also mean. Defaults 0. sigma Score standard deviations. Composite scores also standard deviation. Defaults 1. names_suffix character string added composite score name keep_observed_scores observed scores returned along composite scores. ... parameters passed simstandardized_matrices","code":""},{"path":"https://wjschne.github.io/simstandard/reference/add_composite_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"For each latent variable in a structural model, add a composite score to observed data. — add_composite_scores","text":"data.frame observed data estimated factor scores","code":""},{"path":"https://wjschne.github.io/simstandard/reference/add_composite_scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"For each latent variable in a structural model, add a composite score to observed data. — add_composite_scores","text":"","code":"library(simstandard) # lavaan model m = \" X =~ 0.9 * X1 + 0.8 * X2 + 0.7 * X3 \"  # Make data.frame for two cases d <- data.frame(   X1 = c(1.2, -1.2),   X2 = c(1.5, -1.8),   X3 = c(1.8, -1.1))  # Compute composite scores for two cases add_composite_scores(d, m) #>     X1   X2   X3 X_Composite #> 1  1.2  1.5  1.8    1.723139 #> 2 -1.2 -1.8 -1.1   -1.569971"},{"path":"https://wjschne.github.io/simstandard/reference/add_factor_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"For each latent variable in a structural model, add an estimated factor score to observed data. — add_factor_scores","title":"For each latent variable in a structural model, add an estimated factor score to observed data. — add_factor_scores","text":"latent variable structural model, add estimated factor score observed data.","code":""},{"path":"https://wjschne.github.io/simstandard/reference/add_factor_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For each latent variable in a structural model, add an estimated factor score to observed data. — add_factor_scores","text":"","code":"add_factor_scores(   d,   m,   mu = 0,   sigma = 1,   CI = FALSE,   p = 0.95,   names_suffix = \"_FS\",   keep_observed_scores = TRUE,   ... )"},{"path":"https://wjschne.github.io/simstandard/reference/add_factor_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For each latent variable in a structural model, add an estimated factor score to observed data. — add_factor_scores","text":"d data.frame observed data standardized form (.e, z-scores) m character string lavaan model mu Population mean observed scores. Factor scores also mean. Defaults 0. sigma Population standard deviation observed scores. Factor scores also standard deviation. Defaults 1. CI Add confidence intervals? Defaults `FALSE`. `TRUE`, factor score, lower upper bound confidence interval created. example, lower bound factor score `X` `X_LB`, upper bound `X_UB`. p confidence interval proportion. Defaults 0.95 names_suffix character string added factor score name keep_observed_scores observed scores returned along factor scores. ... parameters passed simstandardized_matrices","code":""},{"path":"https://wjschne.github.io/simstandard/reference/add_factor_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"For each latent variable in a structural model, add an estimated factor score to observed data. — add_factor_scores","text":"data.frame observed data estimated factor scores","code":""},{"path":"https://wjschne.github.io/simstandard/reference/add_factor_scores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"For each latent variable in a structural model, add an estimated factor score to observed data. — add_factor_scores","text":"","code":"library(simstandard) # lavaan model m = \" X =~ 0.9 * X1 + 0.8 * X2 + 0.7 * X3 \"  # Make data.frame for two cases d <- data.frame(   X1 = c(1.2, -1.2),   X2 = c(1.5, -1.8),   X3 = c(1.8, -1.1))  # Compute factor scores for two cases add_factor_scores(d, m) #>     X1   X2   X3      X_FS #> 1  1.2  1.5  1.8  1.435708 #> 2 -1.2 -1.8 -1.1 -1.398951"},{"path":"https://wjschne.github.io/simstandard/reference/check_matrix2lavaan.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks matrices for matrix2lavaan function — check_matrix2lavaan","title":"Checks matrices for matrix2lavaan function — check_matrix2lavaan","text":"Checks matrices matrix2lavaan function","code":""},{"path":"https://wjschne.github.io/simstandard/reference/check_matrix2lavaan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks matrices for matrix2lavaan function — check_matrix2lavaan","text":"m matrix, data.frame tibble mname Name m","code":""},{"path":"https://wjschne.github.io/simstandard/reference/fixed2free.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove fixed parameters from a lavaan model — fixed2free","title":"Remove fixed parameters from a lavaan model — fixed2free","text":"Remove fixed parameters lavaan model","code":""},{"path":"https://wjschne.github.io/simstandard/reference/fixed2free.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove fixed parameters from a lavaan model — fixed2free","text":"","code":"fixed2free(m)"},{"path":"https://wjschne.github.io/simstandard/reference/fixed2free.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove fixed parameters from a lavaan model — fixed2free","text":"m Structural model represented lavaan syntax","code":""},{"path":"https://wjschne.github.io/simstandard/reference/fixed2free.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove fixed parameters from a lavaan model — fixed2free","text":"character string representing lavaan model","code":""},{"path":"https://wjschne.github.io/simstandard/reference/fixed2free.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove fixed parameters from a lavaan model — fixed2free","text":"","code":"library(simstandard) # lavaan model with fixed parameters m = \" Latent_1 =~ 0.9 * Ob_11 + 0.8 * Ob_12 + 0.7 * Ob_13 Latent_2 =~ 0.9 * Ob_21 + 0.6 * Ob_22 + 0.4 * Ob_23 \" # Same model, but with fixed parameters removed. m_free <- fixed2free(m) cat(m_free) #> Latent_1 =~ Ob_11 + Ob_12 + Ob_13 #> Latent_2 =~ Ob_21 + Ob_22 + Ob_23"},{"path":"https://wjschne.github.io/simstandard/reference/get_factor_score_coefficients.html","id":null,"dir":"Reference","previous_headings":"","what":"Return factor score coefficients — get_factor_score_coefficients","title":"Return factor score coefficients — get_factor_score_coefficients","text":"Return factor score coefficients","code":""},{"path":"https://wjschne.github.io/simstandard/reference/get_factor_score_coefficients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return factor score coefficients — get_factor_score_coefficients","text":"","code":"get_factor_score_coefficients(m, latent = TRUE, errors = FALSE, ...)"},{"path":"https://wjschne.github.io/simstandard/reference/get_factor_score_coefficients.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return factor score coefficients — get_factor_score_coefficients","text":"m Structural model represented lavaan syntax output sim_standardized_matrices function. latent Include latent variables. errors Include observed error latent disturbances variables. ... parameters passed `sim_standardized_matrices` function","code":""},{"path":"https://wjschne.github.io/simstandard/reference/get_factor_score_coefficients.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return factor score coefficients — get_factor_score_coefficients","text":"matrix factor score coefficients","code":""},{"path":"https://wjschne.github.io/simstandard/reference/get_factor_score_coefficients.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return factor score coefficients — get_factor_score_coefficients","text":"","code":"m <- \" A =~ 0.5 * A1 + 0.8 * A2 + 0.8 * A3 B =~ 0.5 * B1 + 0.8 * B2 + 0.8 * B3 B ~ 0.5 * A \" get_factor_score_coefficients(m) #>          A_FS       B_FS #> A1 0.12977451 0.01656696 #> A2 0.43258168 0.05522319 #> A3 0.43258168 0.05522319 #> B1 0.01656696 0.12977451 #> B2 0.05522319 0.43258168 #> B3 0.05522319 0.43258168"},{"path":"https://wjschne.github.io/simstandard/reference/get_factor_score_validity.html","id":null,"dir":"Reference","previous_headings":"","what":"Return factor score validity coefficients — get_factor_score_validity","title":"Return factor score validity coefficients — get_factor_score_validity","text":"Return factor score validity coefficients","code":""},{"path":"https://wjschne.github.io/simstandard/reference/get_factor_score_validity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return factor score validity coefficients — get_factor_score_validity","text":"","code":"get_factor_score_validity(m, latent = TRUE, errors = FALSE, ...)"},{"path":"https://wjschne.github.io/simstandard/reference/get_factor_score_validity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return factor score validity coefficients — get_factor_score_validity","text":"m Structural model represented lavaan syntax output sim_standardized_matrices function. latent Include latent variables. errors Include observed error latent disturbances variables. ... parameters passed `sim_standardized_matrices` function","code":""},{"path":"https://wjschne.github.io/simstandard/reference/get_factor_score_validity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return factor score validity coefficients — get_factor_score_validity","text":"matrix validity coefficients","code":""},{"path":"https://wjschne.github.io/simstandard/reference/get_factor_score_validity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return factor score validity coefficients — get_factor_score_validity","text":"","code":"m <- \" A =~ 0.5 * A1 + 0.8 * A2 + 0.8 * A3 B =~ 0.5 * B1 + 0.8 * B2 + 0.8 * B3 B ~ 0.5 * A \" get_factor_score_validity(m) #>      A_FS      B_FS  #> 0.8974064 0.8974064"},{"path":"https://wjschne.github.io/simstandard/reference/get_factor_score_validity_se.html","id":null,"dir":"Reference","previous_headings":"","what":"Return factor score validity coefficient standard errors — get_factor_score_validity_se","title":"Return factor score validity coefficient standard errors — get_factor_score_validity_se","text":"Return factor score validity coefficient standard errors","code":""},{"path":"https://wjschne.github.io/simstandard/reference/get_factor_score_validity_se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return factor score validity coefficient standard errors — get_factor_score_validity_se","text":"","code":"get_factor_score_validity_se(m, latent = TRUE, errors = FALSE, ...)"},{"path":"https://wjschne.github.io/simstandard/reference/get_factor_score_validity_se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return factor score validity coefficient standard errors — get_factor_score_validity_se","text":"m Structural model represented lavaan syntax output sim_standardized_matrices function. latent Include latent variables. errors Include observed error latent disturbances variables. ... parameters passed `sim_standardized_matrices` function","code":""},{"path":"https://wjschne.github.io/simstandard/reference/get_factor_score_validity_se.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return factor score validity coefficient standard errors — get_factor_score_validity_se","text":"matrix factor score standard errors","code":""},{"path":"https://wjschne.github.io/simstandard/reference/get_factor_score_validity_se.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return factor score validity coefficient standard errors — get_factor_score_validity_se","text":"","code":"m <- \" A =~ 0.5 * A1 + 0.8 * A2 + 0.8 * A3 B =~ 0.5 * B1 + 0.8 * B2 + 0.8 * B3 B ~ 0.5 * A \" get_factor_score_validity_se(m) #>      A_FS      B_FS  #> 0.4412049 0.4412049"},{"path":"https://wjschne.github.io/simstandard/reference/get_model_implied_correlations.html","id":null,"dir":"Reference","previous_headings":"","what":"Return model-implied correlation matrix — get_model_implied_correlations","title":"Return model-implied correlation matrix — get_model_implied_correlations","text":"Function takes lavaan model standardized parameters returns model-implied correlation matrix","code":""},{"path":"https://wjschne.github.io/simstandard/reference/get_model_implied_correlations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return model-implied correlation matrix — get_model_implied_correlations","text":"","code":"get_model_implied_correlations(   m,   observed = TRUE,   latent = FALSE,   errors = FALSE,   factor_scores = FALSE,   composites = FALSE,   ... )"},{"path":"https://wjschne.github.io/simstandard/reference/get_model_implied_correlations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return model-implied correlation matrix — get_model_implied_correlations","text":"m Structural model represented lavaan syntax output sim_standardized_matrices function. observed Include observed variables latent Include latent variables errors Include observed error latent disturbances variables factor_scores Include factor score variables composites Include composite variables ... parameters passed `sim_standardized_matrices` function","code":""},{"path":"https://wjschne.github.io/simstandard/reference/get_model_implied_correlations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return model-implied correlation matrix — get_model_implied_correlations","text":"correlation matrix","code":""},{"path":"https://wjschne.github.io/simstandard/reference/get_model_implied_correlations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return model-implied correlation matrix — get_model_implied_correlations","text":"","code":"library(simstandard) # lavaan model m = \"Latent_1 =~ 0.8 * Ob_1 + 0.7 * Ob_2 + 0.4 * Ob_3\"  get_model_implied_correlations(m) #>      Ob_1 Ob_2 Ob_3 #> Ob_1 1.00 0.56 0.32 #> Ob_2 0.56 1.00 0.28 #> Ob_3 0.32 0.28 1.00"},{"path":"https://wjschne.github.io/simstandard/reference/get_model_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Return model names — get_model_names","title":"Return model names — get_model_names","text":"Return model names","code":""},{"path":"https://wjschne.github.io/simstandard/reference/get_model_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return model names — get_model_names","text":"","code":"get_model_names(m, ...)"},{"path":"https://wjschne.github.io/simstandard/reference/get_model_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return model names — get_model_names","text":"m Structural model represented lavaan syntax output sim_standardized_matrices function. ... parameters passed `sim_standardized_matrices` function","code":""},{"path":"https://wjschne.github.io/simstandard/reference/get_model_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return model names — get_model_names","text":"list variable names","code":""},{"path":"https://wjschne.github.io/simstandard/reference/get_model_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return model names — get_model_names","text":"","code":"m <- \" A =~ 0.5 * A1 + 0.8 * A2 + 0.8 * A3 B =~ 0.5 * B1 + 0.8 * B2 + 0.8 * B3 B ~ 0.5 * A \" get_model_names(m) #> $v_observed #> [1] \"A1\" \"A2\" \"A3\" \"B1\" \"B2\" \"B3\" #>  #> $v_latent #> [1] \"A\" \"B\" #>  #> $v_latent_exogenous #> [1] \"A\" #>  #> $v_latent_endogenous #> [1] \"B\" #>  #> $v_observed_exogenous #> character(0) #>  #> $v_observed_endogenous #> [1] \"A1\" \"A2\" \"A3\" \"B1\" \"B2\" \"B3\" #>  #> $v_observed_indicator #> [1] \"A1\" \"A2\" \"A3\" \"B1\" \"B2\" \"B3\" #>  #> $v_disturbance #> [1] \"d_B\" #>  #> $v_error #> [1] \"e_A1\" \"e_A2\" \"e_A3\" \"e_B1\" \"e_B2\" \"e_B3\" #>  #> $v_residual #> [1] \"d_B\"  \"e_A1\" \"e_A2\" \"e_A3\" \"e_B1\" \"e_B2\" \"e_B3\" #>  #> $v_factor_score #> [1] \"A_FS\" \"B_FS\" #>  #> $v_factor_score_disturbance #> [1] \"d_B_FS\" #>  #> $v_factor_score_error #> [1] \"e_A1_FS\" \"e_A2_FS\" \"e_A3_FS\" \"e_B1_FS\" \"e_B2_FS\" \"e_B3_FS\" #>  #> $v_composite_score #> [1] \"A_Composite\" \"B_Composite\" #>"},{"path":"https://wjschne.github.io/simstandard/reference/lav2ram.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract standardized RAM matrices from a lavaan object — lav2ram","title":"Extract standardized RAM matrices from a lavaan object — lav2ram","text":"Extract standardized RAM matrices lavaan object","code":""},{"path":"https://wjschne.github.io/simstandard/reference/lav2ram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract standardized RAM matrices from a lavaan object — lav2ram","text":"","code":"lav2ram(fit)"},{"path":"https://wjschne.github.io/simstandard/reference/lav2ram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract standardized RAM matrices from a lavaan object — lav2ram","text":"fit object class lavaan","code":""},{"path":"https://wjschne.github.io/simstandard/reference/lav2ram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract standardized RAM matrices from a lavaan object — lav2ram","text":"list RAM matrices (asymmetric paths), S (symmetric paths), F (filter matrix)","code":""},{"path":"https://wjschne.github.io/simstandard/reference/matrix2lavaan.html","id":null,"dir":"Reference","previous_headings":"","what":"Create lavaan model syntax from matrix coefficients — matrix2lavaan","title":"Create lavaan model syntax from matrix coefficients — matrix2lavaan","text":"Create lavaan model syntax matrix coefficients","code":""},{"path":"https://wjschne.github.io/simstandard/reference/matrix2lavaan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create lavaan model syntax from matrix coefficients — matrix2lavaan","text":"","code":"matrix2lavaan(   measurement_model = NULL,   structural_model = NULL,   covariances = NULL )"},{"path":"https://wjschne.github.io/simstandard/reference/matrix2lavaan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create lavaan model syntax from matrix coefficients — matrix2lavaan","text":"measurement_model matrix data.frame measurement model loadings. Column names latent variables. Row names first column data.frame indicator variables. structural_model matrix data.frame structural model coefficients (.e., regressions). Column names \"causal\" variables. Row names first column data.frame \"effect\" variables. covariances matrix data.frame model covariances. Column names must match row names. data.frame, row variable names can specified first column.","code":""},{"path":"https://wjschne.github.io/simstandard/reference/matrix2lavaan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create lavaan model syntax from matrix coefficients — matrix2lavaan","text":"character string lavaan syntax","code":""},{"path":"https://wjschne.github.io/simstandard/reference/matrix2lavaan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create lavaan model syntax from matrix coefficients — matrix2lavaan","text":"","code":"library(simstandard) # Specifying the measurement model: # For a data.frame, the column names are latent variables, # and the indicators can be specified as rownames. m <- data.frame(X = c(0.7,0.8,0,0),                 Y = c(0,0,0.8,0.9)) rownames(m) <- c(\"A\", \"B\", \"C\", \"D\") # Indicator variables can also be specified # as the first column variable # with subsequent column names as latent variables m <- data.frame(Indicators = c(\"A\", \"B\", \"C\", \"D\"),                 X = c(0.7,0.8,0,0),                 Y = c(0,0,0.8,0.9)) # Alternately, a matrix can be used: m <- matrix(c(0.7,0.8,0,0,               0,0,0.8,0.9),               ncol = 2,               dimnames = list(c(\"A\", \"B\", \"C\", \"D\"),                               c(\"X\", \"Y\"))) # Specifying the structural coefficients: # The regression coefficients of the structural model can be # specified as either a data.frame or a matrix. Column names # are the predictors and row names are the criterion variables. # With a data.frame, criterion variables can alternataly be # specified with as the first column. s <- matrix(0.5, nrow = 1, ncol = 1, dimnames = list(\"Y\", \"X\")) # The covariance matrix must be symmetric. Can also be specified # as a data. frame. Sigma <- matrix(c(1, 0.3,                   0.3, 1),                 nrow = 2,                 ncol = 2,                 dimnames = list(c(\"B\",\"C\"),                                 c(\"B\",\"C\")) ) model <- matrix2lavaan(measurement_model = m,                        structural_model = s,                        covariances = Sigma) cat(model) #> X =~ 0.7 * A + 0.8 * B #> Y =~ 0.8 * C + 0.9 * D #> Y ~ 0.5 * X #> B ~~ 0.3 * C"},{"path":"https://wjschne.github.io/simstandard/reference/model_complete.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that takes a lavaan model with standardized paths and loadings and returns a complete lavaan model syntax with standardized variances — model_complete","title":"Function that takes a lavaan model with standardized paths and loadings and returns a complete lavaan model syntax with standardized variances — model_complete","text":"Function takes lavaan model standardized paths loadings returns complete lavaan model syntax standardized variances","code":""},{"path":"https://wjschne.github.io/simstandard/reference/model_complete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that takes a lavaan model with standardized paths and loadings and returns a complete lavaan model syntax with standardized variances — model_complete","text":"","code":"model_complete(m)"},{"path":"https://wjschne.github.io/simstandard/reference/model_complete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function that takes a lavaan model with standardized paths and loadings and returns a complete lavaan model syntax with standardized variances — model_complete","text":"m Structural model represented lavaan syntax","code":""},{"path":"https://wjschne.github.io/simstandard/reference/model_complete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function that takes a lavaan model with standardized paths and loadings and returns a complete lavaan model syntax with standardized variances — model_complete","text":"character string representing lavaan model","code":""},{"path":"https://wjschne.github.io/simstandard/reference/model_complete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function that takes a lavaan model with standardized paths and loadings and returns a complete lavaan model syntax with standardized variances — model_complete","text":"","code":"library(simstandard) # lavaan model m = \" Latent_1 =~ 0.9 * Ob_11 + 0.8 * Ob_12 + 0.7 * Ob_13 Latent_2 =~ 0.9 * Ob_21 + 0.6 * Ob_22 + 0.4 * Ob_23 Latent_2 ~ 0.6 * Latent_1 \" # Same lavaan syntax, but with standardized variances m_complete <- model_complete(m) cat(m_complete) #>  #> Latent_1 =~ 0.9 * Ob_11 + 0.8 * Ob_12 + 0.7 * Ob_13 #> Latent_2 =~ 0.9 * Ob_21 + 0.6 * Ob_22 + 0.4 * Ob_23 #> Latent_2 ~ 0.6 * Latent_1 #>  #> # Variances #> Ob_11 ~~ 0.19 * Ob_11 #> Ob_12 ~~ 0.36 * Ob_12 #> Ob_13 ~~ 0.51 * Ob_13 #> Ob_21 ~~ 0.19 * Ob_21 #> Ob_22 ~~ 0.64 * Ob_22 #> Ob_23 ~~ 0.84 * Ob_23 #> Latent_1 ~~ 1 * Latent_1 #> Latent_2 ~~ 0.64 * Latent_2"},{"path":"https://wjschne.github.io/simstandard/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://wjschne.github.io/simstandard/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://wjschne.github.io/simstandard/reference/sim_standardized.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates simulated data with standardized parameters. — sim_standardized","title":"Generates simulated data with standardized parameters. — sim_standardized","text":"function takes lavaan model standardized parameters simulates latent scores, errors, disturbances, observed scores.","code":""},{"path":"https://wjschne.github.io/simstandard/reference/sim_standardized.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates simulated data with standardized parameters. — sim_standardized","text":"","code":"sim_standardized(   m,   n = 1000,   observed = TRUE,   latent = TRUE,   errors = TRUE,   factor_scores = FALSE,   composites = FALSE,   matrices = FALSE,   ... )"},{"path":"https://wjschne.github.io/simstandard/reference/sim_standardized.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates simulated data with standardized parameters. — sim_standardized","text":"m Structural model represented lavaan syntax n Number simulated cases observed Include observed variables latent Include latent variables errors Include observed error latent disturbances variables factor_scores Include factor score variables composites Include composite variables matrices Include matrices attribute tibble ... Arguments passed `simstandardized_matrices`","code":""},{"path":"https://wjschne.github.io/simstandard/reference/sim_standardized.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates simulated data with standardized parameters. — sim_standardized","text":"tibble standardized data","code":""},{"path":"https://wjschne.github.io/simstandard/reference/sim_standardized.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generates simulated data with standardized parameters. — sim_standardized","text":"function supports `~` operator regressions, `~~` covariances (variances), `=~` latent variable loadings. support intercepts (e.g,. `y ~ 1`), thresholds, scaling factors, formative factors, equality constraints.","code":""},{"path":"https://wjschne.github.io/simstandard/reference/sim_standardized.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates simulated data with standardized parameters. — sim_standardized","text":"","code":"library(simstandard) # Lavaan model m = \"Latent_1 =~ 0.8 * Ob_1 + 0.7 * Ob_2 + 0.4 * Ob_3\"  # simulate 10 cases sim_standardized(m, n = 10) #> # A tibble: 10 × 7 #>       Ob_1    Ob_2    Ob_3 Latent_1 e_Ob_1  e_Ob_2 e_Ob_3 #>      <dbl>   <dbl>   <dbl>    <dbl>  <dbl>   <dbl>  <dbl> #>  1 -0.844   0.178  -2.24   -0.00557 -0.840  0.182  -2.23  #>  2  0.175   0.647  -1.77   -0.247    0.373  0.820  -1.67  #>  3  0.357   0.238  -0.256   0.629   -0.147 -0.202  -0.507 #>  4 -0.251  -2.47   -0.276  -1.86     1.24  -1.16    0.470 #>  5 -1.04   -0.677   0.132  -0.914   -0.313 -0.0376  0.498 #>  6  0.871   0.776  -0.901   0.738    0.281  0.259  -1.20  #>  7  1.12   -0.0808 -0.864  -0.0160   1.13  -0.0696 -0.858 #>  8 -0.355  -0.957   0.928   0.176   -0.496 -1.08    0.857 #>  9  0.0390  1.07    0.0491 -0.134    0.146  1.16    0.103 #> 10 -0.292   0.548   0.140   1.07    -1.15  -0.199  -0.287"},{"path":"https://wjschne.github.io/simstandard/reference/sim_standardized_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Return model characteristics — sim_standardized_matrices","title":"Return model characteristics — sim_standardized_matrices","text":"Function takes lavaan model standardized parameters returns list model characteristics","code":""},{"path":"https://wjschne.github.io/simstandard/reference/sim_standardized_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return model characteristics — sim_standardized_matrices","text":"","code":"sim_standardized_matrices(m, max_iterations = 100, composite_threshold = NULL)"},{"path":"https://wjschne.github.io/simstandard/reference/sim_standardized_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return model characteristics — sim_standardized_matrices","text":"m Structural model represented lavaan syntax max_iterations Maximum number iterations algorithm fails composite_threshold Loadings absolute values less threshold counted composite indicators","code":""},{"path":"https://wjschne.github.io/simstandard/reference/sim_standardized_matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return model characteristics — sim_standardized_matrices","text":"list path covariance coefficients","code":""},{"path":"https://wjschne.github.io/simstandard/reference/sim_standardized_matrices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return model characteristics — sim_standardized_matrices","text":"function supports `~` operator regressions, `~~` covariances (variances), `=~` latent variable loadings. support intercepts (e.g,. `y ~ 1`), thresholds, scaling factors, formative factors, equality constraints.","code":""},{"path":"https://wjschne.github.io/simstandard/reference/sim_standardized_matrices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return model characteristics — sim_standardized_matrices","text":"","code":"library(simstandard) # lavaan model m = \"Latent_1 =~ 0.8 * Ob_1 + 0.7 * Ob_2 + 0.4 * Ob_3\"  sim_standardized_matrices(m) #> $RAM_matrices #> $RAM_matrices$A #>          Ob_1 Ob_2 Ob_3 Latent_1 #> Ob_1        0    0    0      0.8 #> Ob_2        0    0    0      0.7 #> Ob_3        0    0    0      0.4 #> Latent_1    0    0    0      0.0 #>  #> $RAM_matrices$S #>          Ob_1 Ob_2 Ob_3 Latent_1 #> Ob_1     0.36 0.00 0.00        0 #> Ob_2     0.00 0.51 0.00        0 #> Ob_3     0.00 0.00 0.84        0 #> Latent_1 0.00 0.00 0.00        1 #>  #> $RAM_matrices$filter_matrix #>          Ob_1 Ob_2 Ob_3 Latent_1 #> Ob_1        1    0    0        0 #> Ob_2        0    1    0        0 #> Ob_3        0    0    1        0 #> Latent_1    0    0    0        0 #>  #> $RAM_matrices$iA #>          Ob_1 Ob_2 Ob_3 Latent_1 #> Ob_1        1    0    0      0.8 #> Ob_2        0    1    0      0.7 #> Ob_3        0    0    1      0.4 #> Latent_1    0    0    0      1.0 #>  #>  #> $Correlations #> $Correlations$R #>          Ob_1 Ob_2 Ob_3 Latent_1 #> Ob_1     1.00 0.56 0.32      0.8 #> Ob_2     0.56 1.00 0.28      0.7 #> Ob_3     0.32 0.28 1.00      0.4 #> Latent_1 0.80 0.70 0.40      1.0 #>  #> $Correlations$R_all #>                             Ob_1         Ob_2         Ob_3  Latent_1     e_Ob_1 #> Ob_1                1.000000e+00 5.600000e-01 3.200000e-01 0.8000000  0.6000000 #> Ob_2                5.600000e-01 1.000000e+00 2.800000e-01 0.7000000  0.0000000 #> Ob_3                3.200000e-01 2.800000e-01 1.000000e+00 0.4000000  0.0000000 #> Latent_1            8.000000e-01 7.000000e-01 4.000000e-01 1.0000000  0.0000000 #> e_Ob_1              6.000000e-01 0.000000e+00 0.000000e+00 0.0000000  1.0000000 #> e_Ob_2              0.000000e+00 7.141428e-01 0.000000e+00 0.0000000  0.0000000 #> e_Ob_3              0.000000e+00 0.000000e+00 9.165151e-01 0.0000000  0.0000000 #> Latent_1_FS         9.265537e-01 8.107345e-01 4.632768e-01 0.8634146  0.3930367 #> e_Ob_1_FS           8.108637e-01 8.545002e-17 0.000000e+00 0.4586159  0.7399517 #> e_Ob_2_FS          -8.130540e-17 8.216327e-01 1.596661e-17 0.2870247 -0.3826996 #> e_Ob_3_FS           3.202639e-17 6.033007e-17 9.395729e-01 0.1138741 -0.1518321 #> Latent_1_Composite  8.150834e-01 7.977412e-01 6.936880e-01 0.8237545  0.2601330 #>                        e_Ob_2     e_Ob_3 Latent_1_FS     e_Ob_1_FS #> Ob_1                0.0000000  0.0000000   0.9265537  8.108637e-01 #> Ob_2                0.7141428  0.0000000   0.8107345  8.545002e-17 #> Ob_3                0.0000000  0.9165151   0.4632768  0.000000e+00 #> Latent_1            0.0000000  0.0000000   0.8634146  4.586159e-01 #> e_Ob_1              0.0000000  0.0000000   0.3930367  7.399517e-01 #> e_Ob_2              1.0000000  0.0000000   0.2889398 -4.495335e-01 #> e_Ob_3              0.0000000  1.0000000   0.1286515 -2.001564e-01 #> Latent_1_FS         0.2889398  0.1286515   1.0000000  5.311653e-01 #> e_Ob_1_FS          -0.4495335 -0.2001564   0.5311653  1.000000e+00 #> e_Ob_2_FS           0.8691753 -0.1252679   0.3324298 -5.171954e-01 #> e_Ob_3_FS          -0.1116189  0.9754593   0.1318881 -2.051919e-01 #> Latent_1_Composite  0.3096202  0.3973597   0.9540659  3.515540e-01 #>                        e_Ob_2_FS     e_Ob_3_FS Latent_1_Composite #> Ob_1               -8.130540e-17  3.202639e-17          0.8150834 #> Ob_2                8.216327e-01  6.033007e-17          0.7977412 #> Ob_3                1.596661e-17  9.395729e-01          0.6936880 #> Latent_1            2.870247e-01  1.138741e-01          0.8237545 #> e_Ob_1             -3.826996e-01 -1.518321e-01          0.2601330 #> e_Ob_2              8.691753e-01 -1.116189e-01          0.3096202 #> e_Ob_3             -1.252679e-01  9.754593e-01          0.3973597 #> Latent_1_FS         3.324298e-01  1.318881e-01          0.9540659 #> e_Ob_1_FS          -5.171954e-01 -2.051919e-01          0.3515540 #> e_Ob_2_FS           1.000000e+00 -1.284194e-01          0.3562229 #> e_Ob_3_FS          -1.284194e-01  1.000000e+00          0.4073565 #> Latent_1_Composite  3.562229e-01  4.073565e-01          1.0000000 #>  #>  #> $Coefficients #> $Coefficients$factor_score #>      Latent_1_FS  e_Ob_1_FS  e_Ob_2_FS  e_Ob_3_FS #> Ob_1   0.5655894  0.9125475 -0.5543885 -0.2468434 #> Ob_2   0.3493346 -0.4657795  1.0578637 -0.1524621 #> Ob_3   0.1211977 -0.1615970 -0.1187975  1.0381944 #>  #> $Coefficients$factor_score_validity #> Latent_1_FS   e_Ob_1_FS   e_Ob_2_FS   e_Ob_3_FS  #>   0.8634146   0.7399517   0.8691753   0.9754593  #>  #> $Coefficients$factor_score_se #> Latent_1_FS   e_Ob_1_FS   e_Ob_2_FS   e_Ob_3_FS  #>   0.5044950   0.6726600   0.4945040   0.2201797  #>  #> $Coefficients$composite_score #>      Latent_1_Composite #> Ob_1           0.433555 #> Ob_2           0.433555 #> Ob_3           0.433555 #>  #> $Coefficients$composite_score_validity #> Latent_1_Composite  #>          0.8237545  #>  #>  #> $lavaan_models #> $lavaan_models$model_without_variances #> [1] \"Latent_1 =~ 0.8 * Ob_1 + 0.7 * Ob_2 + 0.4 * Ob_3\" #>  #> $lavaan_models$model_with_variances #> [1] \"Latent_1 =~ 0.8 * Ob_1 + 0.7 * Ob_2 + 0.4 * Ob_3\\n# Variances\\nOb_1 ~~ 0.36 * Ob_1\\nOb_2 ~~ 0.51 * Ob_2\\nOb_3 ~~ 0.84 * Ob_3\\nLatent_1 ~~ 1 * Latent_1\" #>  #> $lavaan_models$model_free #> [1] \"Latent_1 =~ Ob_1 + Ob_2 + Ob_3\" #>  #>  #> $v_names #> $v_names$v_observed #> [1] \"Ob_1\" \"Ob_2\" \"Ob_3\" #>  #> $v_names$v_latent #> [1] \"Latent_1\" #>  #> $v_names$v_latent_exogenous #> [1] \"Latent_1\" #>  #> $v_names$v_latent_endogenous #> character(0) #>  #> $v_names$v_observed_exogenous #> character(0) #>  #> $v_names$v_observed_endogenous #> [1] \"Ob_1\" \"Ob_2\" \"Ob_3\" #>  #> $v_names$v_observed_indicator #> [1] \"Ob_1\" \"Ob_2\" \"Ob_3\" #>  #> $v_names$v_disturbance #> character(0) #>  #> $v_names$v_error #> [1] \"e_Ob_1\" \"e_Ob_2\" \"e_Ob_3\" #>  #> $v_names$v_residual #> [1] \"e_Ob_1\" \"e_Ob_2\" \"e_Ob_3\" #>  #> $v_names$v_factor_score #> [1] \"Latent_1_FS\" #>  #> $v_names$v_factor_score_disturbance #> character(0) #>  #> $v_names$v_factor_score_error #> [1] \"e_Ob_1_FS\" \"e_Ob_2_FS\" \"e_Ob_3_FS\" #>  #> $v_names$v_composite_score #> [1] \"Latent_1_Composite\" #>  #>  #> $iterations #> [1] 2 #>  #> attr(,\"class\") #> [1] \"simstandard\" \"list\""},{"path":"https://wjschne.github.io/simstandard/news/index.html","id":"simstandard-070-development-version","dir":"Changelog","previous_headings":"","what":"simstandard 0.7.0 development version","title":"simstandard 0.7.0 development version","text":"Changed Depends field R (>= 3.4.0) R (>= 3.5.0) dependency mvtnorm package. Fixed bug composite score indicators assigned higher-order factors. Previous code distinguish indicator paths regression paths.","code":""},{"path":"https://wjschne.github.io/simstandard/news/index.html","id":"simstandard-063-2021-05-07","dir":"Changelog","previous_headings":"","what":"simstandard 0.6.3 2021-05-07","title":"simstandard 0.6.3 2021-05-07","text":"CRAN release: 2021-05-07 Added get_factor_score_validity_se function return factor score standard errors. Added get_model_names function return list model variable names.","code":""},{"path":"https://wjschne.github.io/simstandard/news/index.html","id":"simstandard-062-2021-01-21","dir":"Changelog","previous_headings":"","what":"simstandard 0.6.2 2021-01-21","title":"simstandard 0.6.2 2021-01-21","text":"CRAN release: 2021-01-21 Added get_factor_score_coefficients function return factor score coefficients Added get_factor_score_validity function return factor score validity coefficients Added v_factor_score_disturbance v_factor_score_residual v_names list returned sim_standardized_matrices. v_factor_score list now returns factor score names associated latent variables.","code":""},{"path":"https://wjschne.github.io/simstandard/news/index.html","id":"simstandard-061-2020-12-22","dir":"Changelog","previous_headings":"","what":"simstandard 0.6.1 2020-12-22","title":"simstandard 0.6.1 2020-12-22","text":"Can specify mean standard deviation add_composite_scores add_factor_scores functions. add_factor_scores function now appends _FS factor score names.","code":""},{"path":"https://wjschne.github.io/simstandard/news/index.html","id":"simstandard-060-2020-11-25","dir":"Changelog","previous_headings":"","what":"simstandard 0.6.0 2020-11-25","title":"simstandard 0.6.0 2020-11-25","text":"CRAN release: 2020-11-25 Added get_model_implied_correlations function, returns model-implied correlation matrix observed variables, latent variables, error terms, factor scores, composite variables.","code":""},{"path":"https://wjschne.github.io/simstandard/news/index.html","id":"simstandard-050-2020-10-22","dir":"Changelog","previous_headings":"","what":"simstandard 0.5.0 2020-10-22","title":"simstandard 0.5.0 2020-10-22","text":"CRAN release: 2020-10-22 Added composite_score_validity list returned sim_standardized_matrices Added add_composite_scores function add composite scores new data.","code":""},{"path":"https://wjschne.github.io/simstandard/news/index.html","id":"simstandard-040-2019-01-08","dir":"Changelog","previous_headings":"","what":"simstandard 0.4.0 2019-01-08","title":"simstandard 0.4.0 2019-01-08","text":"Fixed bug prevents computation composite scores third-order fourth-order latent variables.","code":""},{"path":"https://wjschne.github.io/simstandard/news/index.html","id":"simstandard-030-2019-01-07","dir":"Changelog","previous_headings":"","what":"simstandard 0.3.0 2019-01-07","title":"simstandard 0.3.0 2019-01-07","text":"CRAN release: 2019-01-07 Added matrix2lavaan function provide convenient method creating lavaan syntax matrices. Added lav2ram function extract standardized RAM matrices lavaan object. sim_standardized_matrices function new argument, composite_threshold. argument specified, variables loadings threshold used indicators composite scores. Removed semPlot package suggests list","code":""},{"path":"https://wjschne.github.io/simstandard/news/index.html","id":"simstandard-021-2018-11-09","dir":"Changelog","previous_headings":"","what":"simstandard 0.2.1 2018-11-09","title":"simstandard 0.2.1 2018-11-09","text":"Fixed method finding indicators composite variables. composite now created direct indicators unless latent variable higher-order factor direct indicators.","code":""},{"path":"https://wjschne.github.io/simstandard/news/index.html","id":"simstandard-020-2018-11-08","dir":"Changelog","previous_headings":"","what":"simstandard 0.2.0 2018-11-08","title":"simstandard 0.2.0 2018-11-08","text":"CRAN release: 2018-11-08 Added fixed2free function, takes lavaan syntax model fixed parameters returns lavaan syntax model parameters free. Added model_complete function, takes lavaan syntax model standardized loadings, structure coefficients, covariances, returns lavaan syntax model standardized coefficients, including standardized variances. Added add_factor_scores function, adds predicted factor scores data.frame.","code":""},{"path":"https://wjschne.github.io/simstandard/news/index.html","id":"simstandard-010-2018-10-06","dir":"Changelog","previous_headings":"","what":"simstandard 0.1.0 2018-10-06","title":"simstandard 0.1.0 2018-10-06","text":"CRAN release: 2018-10-16 Initial release","code":""}]
